JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsUnknownExpression {
                items: [
                    JsUnknown {
                        items: [
                            IDENT@0..5 "yield" [] [],
                        ],
                    },
                ],
            },
            semicolon_token: SEMICOLON@5..6 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAwaitExpression {
                await_token: AWAIT_KW@6..12 "await" [Newline("\n")] [],
                argument: missing (required),
            },
            semicolon_token: SEMICOLON@12..13 ";" [] [],
        },
        JsFunctionStatement {
            async_token: ASYNC_KW@13..20 "async" [Newline("\n")] [Whitespace(" ")],
            function_token: FUNCTION_KW@20..29 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@29..33 "test" [] [],
            },
            type_parameters: missing (optional),
            parameters: JsParameters {
                l_paren_token: L_PAREN@33..34 "(" [] [],
                items: JsParameterList [
                    JsParameter {
                        binding: JsUnknownBinding {
                            items: [
                                IDENT@34..39 "await" [] [],
                            ],
                        },
                        type_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@39..41 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@41..42 "{" [] [],
                directives: JsDirectiveList [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@42..43 "}" [] [],
            },
        },
        JsFunctionStatement {
            async_token: missing (optional),
            function_token: FUNCTION_KW@43..52 "function" [Newline("\n")] [],
            star_token: STAR@52..54 "*" [] [Whitespace(" ")],
            id: JsIdentifierBinding {
                name_token: IDENT@54..59 "test2" [] [],
            },
            type_parameters: missing (optional),
            parameters: JsParameters {
                l_paren_token: L_PAREN@59..60 "(" [] [],
                items: JsParameterList [
                    JsParameter {
                        binding: JsUnknownBinding {
                            items: [
                                IDENT@60..65 "yield" [] [],
                            ],
                        },
                        type_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@65..67 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@67..68 "{" [] [],
                directives: JsDirectiveList [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@68..69 "}" [] [],
            },
        },
        JsUnknownStatement {
            items: [
                ENUM_KW@69..74 "enum" [Newline("\n")] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@74..75 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnknownExpression {
                items: [
                    JsUnknown {
                        items: [
                            IDENT@75..86 "implements" [Newline("\n")] [],
                        ],
                    },
                ],
            },
            semicolon_token: SEMICOLON@86..87 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnknownExpression {
                items: [
                    JsUnknown {
                        items: [
                            IDENT@87..97 "interface" [Newline("\n")] [],
                        ],
                    },
                ],
            },
            semicolon_token: SEMICOLON@97..98 ";" [] [],
        },
    ],
    eof_token: EOF@98..99 "" [Newline("\n")] [],
}

0: JS_MODULE@0..99
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..98
    0: JS_EXPRESSION_STATEMENT@0..6
      0: JS_UNKNOWN_EXPRESSION@0..5
        0: JS_UNKNOWN@0..5
          0: IDENT@0..5 "yield" [] []
      1: SEMICOLON@5..6 ";" [] []
    1: JS_EXPRESSION_STATEMENT@6..13
      0: JS_AWAIT_EXPRESSION@6..12
        0: AWAIT_KW@6..12 "await" [Newline("\n")] []
        1: (empty)
      1: SEMICOLON@12..13 ";" [] []
    2: JS_FUNCTION_STATEMENT@13..43
      0: ASYNC_KW@13..20 "async" [Newline("\n")] [Whitespace(" ")]
      1: FUNCTION_KW@20..29 "function" [] [Whitespace(" ")]
      2: (empty)
      3: JS_IDENTIFIER_BINDING@29..33
        0: IDENT@29..33 "test" [] []
      4: (empty)
      5: JS_PARAMETERS@33..41
        0: L_PAREN@33..34 "(" [] []
        1: JS_PARAMETER_LIST@34..39
          0: JS_PARAMETER@34..39
            0: JS_UNKNOWN_BINDING@34..39
              0: IDENT@34..39 "await" [] []
            1: (empty)
            2: (empty)
        2: R_PAREN@39..41 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@41..43
        0: L_CURLY@41..42 "{" [] []
        1: JS_DIRECTIVE_LIST@42..42
        2: JS_STATEMENT_LIST@42..42
        3: R_CURLY@42..43 "}" [] []
    3: JS_FUNCTION_STATEMENT@43..69
      0: (empty)
      1: FUNCTION_KW@43..52 "function" [Newline("\n")] []
      2: STAR@52..54 "*" [] [Whitespace(" ")]
      3: JS_IDENTIFIER_BINDING@54..59
        0: IDENT@54..59 "test2" [] []
      4: (empty)
      5: JS_PARAMETERS@59..67
        0: L_PAREN@59..60 "(" [] []
        1: JS_PARAMETER_LIST@60..65
          0: JS_PARAMETER@60..65
            0: JS_UNKNOWN_BINDING@60..65
              0: IDENT@60..65 "yield" [] []
            1: (empty)
            2: (empty)
        2: R_PAREN@65..67 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@67..69
        0: L_CURLY@67..68 "{" [] []
        1: JS_DIRECTIVE_LIST@68..68
        2: JS_STATEMENT_LIST@68..68
        3: R_CURLY@68..69 "}" [] []
    4: JS_UNKNOWN_STATEMENT@69..74
      0: ENUM_KW@69..74 "enum" [Newline("\n")] []
    5: JS_EMPTY_STATEMENT@74..75
      0: SEMICOLON@74..75 ";" [] []
    6: JS_EXPRESSION_STATEMENT@75..87
      0: JS_UNKNOWN_EXPRESSION@75..86
        0: JS_UNKNOWN@75..86
          0: IDENT@75..86 "implements" [Newline("\n")] []
      1: SEMICOLON@86..87 ";" [] []
    7: JS_EXPRESSION_STATEMENT@87..98
      0: JS_UNKNOWN_EXPRESSION@87..97
        0: JS_UNKNOWN@87..97
          0: IDENT@87..97 "interface" [Newline("\n")] []
      1: SEMICOLON@97..98 ";" [] []
  3: EOF@98..99 "" [Newline("\n")] []
--
error[SyntaxError]: Illegal use of reserved keyword `yield` as an identifier in strict mode
  ┌─ identifier_err.js:1:1
  │
1 │ yield;
  │ ^^^^^

--
error[SyntaxError]: expected an unary expression but instead found ';'
  ┌─ identifier_err.js:2:6
  │
2 │ await;
  │      ^ Expected an unary expression here

--
error[SyntaxError]: Illegal use of `await` as an identifier in an async context
  ┌─ identifier_err.js:3:21
  │
3 │ async function test(await) {}
  │                     ^^^^^

--
error[SyntaxError]: Illegal use of `yield` as an identifier in generator function
  ┌─ identifier_err.js:4:17
  │
4 │ function* test2(yield) {}
  │                 ^^^^^

--
error[SyntaxError]: expected a statement but instead found 'enum'
  ┌─ identifier_err.js:5:1
  │
5 │ enum;
  │ ^^^^ Expected a statement here

--
error[SyntaxError]: Illegal use of reserved keyword `implements` as an identifier in strict mode
  ┌─ identifier_err.js:6:1
  │
6 │ implements;
  │ ^^^^^^^^^^

--
error[SyntaxError]: Illegal use of reserved keyword `interface` as an identifier in strict mode
  ┌─ identifier_err.js:7:1
  │
7 │ interface;
  │ ^^^^^^^^^

--
yield;
await;
async function test(await) {}
function* test2(yield) {}
enum;
implements;
interface;
