JsScript {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    statements: JsStatementList [
        JsLabeledStatement {
            label_token: IDENT@0..16 "label1" [Comments("// SCRIPT"), Newline("\n")] [],
            colon_token: COLON@16..18 ":" [] [Whitespace(" ")],
            body: JsFunctionStatement {
                async_token: missing (optional),
                function_token: FUNCTION_KW@18..27 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@27..28 "a" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@28..29 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@29..31 ")" [] [Whitespace(" ")],
                },
                return_type: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@31..32 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@32..33 "}" [] [],
                },
            },
        },
        JsIfStatement {
            if_token: IF_KW@33..37 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@37..38 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@38..42 "true" [] [],
            },
            r_paren_token: R_PAREN@42..44 ")" [] [Whitespace(" ")],
            consequent: JsFunctionStatement {
                async_token: missing (optional),
                function_token: FUNCTION_KW@44..53 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@53..55 "aa" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@55..56 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@56..58 ")" [] [Whitespace(" ")],
                },
                return_type: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@58..59 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@59..61 "}" [] [Whitespace(" ")],
                },
            },
            else_clause: JsElseClause {
                else_token: ELSE_KW@61..66 "else" [] [Whitespace(" ")],
                alternate: JsFunctionStatement {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@66..75 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: JsIdentifierBinding {
                        name_token: IDENT@75..76 "b" [] [],
                    },
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@76..77 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@77..79 ")" [] [Whitespace(" ")],
                    },
                    return_type: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@79..80 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@80..81 "}" [] [],
                    },
                },
            },
        },
        JsIfStatement {
            if_token: IF_KW@81..85 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@85..86 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@86..90 "true" [] [],
            },
            r_paren_token: R_PAREN@90..92 ")" [] [Whitespace(" ")],
            consequent: JsFunctionStatement {
                async_token: missing (optional),
                function_token: FUNCTION_KW@92..101 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@101..102 "c" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@102..103 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@103..105 ")" [] [Whitespace(" ")],
                },
                return_type: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@105..106 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@106..107 "}" [] [],
                },
            },
            else_clause: missing (optional),
        },
        JsIfStatement {
            if_token: IF_KW@107..111 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@111..112 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@112..116 "true" [] [],
            },
            r_paren_token: R_PAREN@116..118 ")" [] [Whitespace(" ")],
            consequent: JsExpressionStatement {
                expression: JsStringLiteralExpression {
                    value_token: JS_STRING_LITERAL@118..124 "\"test\"" [] [],
                },
                semicolon_token: SEMICOLON@124..126 ";" [] [Whitespace(" ")],
            },
            else_clause: JsElseClause {
                else_token: ELSE_KW@126..131 "else" [] [Whitespace(" ")],
                alternate: JsFunctionStatement {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@131..140 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: JsIdentifierBinding {
                        name_token: IDENT@140..141 "d" [] [],
                    },
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@141..142 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@142..144 ")" [] [Whitespace(" ")],
                    },
                    return_type: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@144..145 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@145..146 "}" [] [],
                    },
                },
            },
        },
    ],
    eof_token: EOF@146..147 "" [Newline("\n")] [],
}

0: JS_SCRIPT@0..147
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_STATEMENT_LIST@0..146
    0: JS_LABELED_STATEMENT@0..33
      0: IDENT@0..16 "label1" [Comments("// SCRIPT"), Newline("\n")] []
      1: COLON@16..18 ":" [] [Whitespace(" ")]
      2: JS_FUNCTION_STATEMENT@18..33
        0: (empty)
        1: FUNCTION_KW@18..27 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@27..28
          0: IDENT@27..28 "a" [] []
        4: (empty)
        5: JS_PARAMETERS@28..31
          0: L_PAREN@28..29 "(" [] []
          1: JS_PARAMETER_LIST@29..29
          2: R_PAREN@29..31 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@31..33
          0: L_CURLY@31..32 "{" [] []
          1: JS_DIRECTIVE_LIST@32..32
          2: JS_STATEMENT_LIST@32..32
          3: R_CURLY@32..33 "}" [] []
    1: JS_IF_STATEMENT@33..81
      0: IF_KW@33..37 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@37..38 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@38..42
        0: TRUE_KW@38..42 "true" [] []
      3: R_PAREN@42..44 ")" [] [Whitespace(" ")]
      4: JS_FUNCTION_STATEMENT@44..61
        0: (empty)
        1: FUNCTION_KW@44..53 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@53..55
          0: IDENT@53..55 "aa" [] []
        4: (empty)
        5: JS_PARAMETERS@55..58
          0: L_PAREN@55..56 "(" [] []
          1: JS_PARAMETER_LIST@56..56
          2: R_PAREN@56..58 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@58..61
          0: L_CURLY@58..59 "{" [] []
          1: JS_DIRECTIVE_LIST@59..59
          2: JS_STATEMENT_LIST@59..59
          3: R_CURLY@59..61 "}" [] [Whitespace(" ")]
      5: JS_ELSE_CLAUSE@61..81
        0: ELSE_KW@61..66 "else" [] [Whitespace(" ")]
        1: JS_FUNCTION_STATEMENT@66..81
          0: (empty)
          1: FUNCTION_KW@66..75 "function" [] [Whitespace(" ")]
          2: (empty)
          3: JS_IDENTIFIER_BINDING@75..76
            0: IDENT@75..76 "b" [] []
          4: (empty)
          5: JS_PARAMETERS@76..79
            0: L_PAREN@76..77 "(" [] []
            1: JS_PARAMETER_LIST@77..77
            2: R_PAREN@77..79 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@79..81
            0: L_CURLY@79..80 "{" [] []
            1: JS_DIRECTIVE_LIST@80..80
            2: JS_STATEMENT_LIST@80..80
            3: R_CURLY@80..81 "}" [] []
    2: JS_IF_STATEMENT@81..107
      0: IF_KW@81..85 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@85..86 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@86..90
        0: TRUE_KW@86..90 "true" [] []
      3: R_PAREN@90..92 ")" [] [Whitespace(" ")]
      4: JS_FUNCTION_STATEMENT@92..107
        0: (empty)
        1: FUNCTION_KW@92..101 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@101..102
          0: IDENT@101..102 "c" [] []
        4: (empty)
        5: JS_PARAMETERS@102..105
          0: L_PAREN@102..103 "(" [] []
          1: JS_PARAMETER_LIST@103..103
          2: R_PAREN@103..105 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@105..107
          0: L_CURLY@105..106 "{" [] []
          1: JS_DIRECTIVE_LIST@106..106
          2: JS_STATEMENT_LIST@106..106
          3: R_CURLY@106..107 "}" [] []
      5: (empty)
    3: JS_IF_STATEMENT@107..146
      0: IF_KW@107..111 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@111..112 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@112..116
        0: TRUE_KW@112..116 "true" [] []
      3: R_PAREN@116..118 ")" [] [Whitespace(" ")]
      4: JS_EXPRESSION_STATEMENT@118..126
        0: JS_STRING_LITERAL_EXPRESSION@118..124
          0: JS_STRING_LITERAL@118..124 "\"test\"" [] []
        1: SEMICOLON@124..126 ";" [] [Whitespace(" ")]
      5: JS_ELSE_CLAUSE@126..146
        0: ELSE_KW@126..131 "else" [] [Whitespace(" ")]
        1: JS_FUNCTION_STATEMENT@131..146
          0: (empty)
          1: FUNCTION_KW@131..140 "function" [] [Whitespace(" ")]
          2: (empty)
          3: JS_IDENTIFIER_BINDING@140..141
            0: IDENT@140..141 "d" [] []
          4: (empty)
          5: JS_PARAMETERS@141..144
            0: L_PAREN@141..142 "(" [] []
            1: JS_PARAMETER_LIST@142..142
            2: R_PAREN@142..144 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@144..146
            0: L_CURLY@144..145 "{" [] []
            1: JS_DIRECTIVE_LIST@145..145
            2: JS_STATEMENT_LIST@145..145
            3: R_CURLY@145..146 "}" [] []
  3: EOF@146..147 "" [Newline("\n")] []
